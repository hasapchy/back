<?php

namespace App\Console\Commands;

use App\Models\CashRegister;
use App\Models\Transaction;
use Illuminate\Console\Command;
use Illuminate\Support\Facades\DB;

class CheckCashBalances extends Command
{
    /**
     * The name and signature of the console command.
     *
     * @var string
     */
    protected $signature = 'cash:check-balances {--detailed : –ü–æ–∫–∞–∑–∞—Ç—å –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –ø–æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è–º}';

    /**
     * The console command description.
     *
     * @var string
     */
    protected $description = '–ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–ª–∞–Ω—Å–æ–≤ –∫–∞—Å—Å: –ø–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ—Ç –ø—Ä–∏—Ö–æ–¥, —Ä–∞—Å—Ö–æ–¥ –∏ –∏—Ç–æ–≥–æ–≤—ã–π –±–∞–ª–∞–Ω—Å –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö';

    /**
     * Execute the console command.
     *
     * @return int
     */
    public function handle()
    {
        $detailed = $this->option('detailed');

        $this->info('üîç –ù–∞—á–∏–Ω–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –±–∞–ª–∞–Ω—Å–æ–≤ –∫–∞—Å—Å...');
        $this->newLine();

        $cashRegisters = CashRegister::with('currency')->get();

        if ($cashRegisters->isEmpty()) {
            $this->warn('‚ö†Ô∏è  –ö–∞—Å—Å—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã');
            return Command::SUCCESS;
        }

        $hasDiscrepancies = false;
        $totalDiscrepancy = 0;
        $totalIncome = 0;
        $totalOutcome = 0;

        foreach ($cashRegisters as $cashRegister) {
            $this->info("‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê");
            $this->info("üì¶ –ö–∞—Å—Å–∞: {$cashRegister->name} (ID: {$cashRegister->id})");
            $this->info("   –í–∞–ª—é—Ç–∞: {$cashRegister->currency->code} ({$cashRegister->currency->symbol})");
            $this->newLine();

            // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –∫–∞—Å—Å—ã
            $allTransactions = Transaction::where('cash_id', $cashRegister->id)->get();

            // –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –±–µ–∑ –¥–æ–ª–≥–∞ (—É—á–∏—Ç—ã–≤–∞—é—Ç—Å—è –≤ –±–∞–ª–∞–Ω—Å–µ)
            $nonDebtTransactions = $allTransactions->where('is_debt', false);

            // –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ —Å –¥–æ–ª–≥–æ–º (–ù–ï —É—á–∏—Ç—ã–≤–∞—é—Ç—Å—è –≤ –±–∞–ª–∞–Ω—Å–µ –∫–∞—Å—Å—ã)
            $debtTransactions = $allTransactions->where('is_debt', true);

            // === –û—Å–Ω–æ–≤–Ω—ã–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ (–Ω–µ –¥–æ–ª–≥–æ–≤—ã–µ) ===
            $incomeCount = $nonDebtTransactions->where('type', 1)->count();
            $income = $nonDebtTransactions->where('type', 1)->sum('amount');

            $outcomeCount = $nonDebtTransactions->where('type', 0)->count();
            $outcome = $nonDebtTransactions->where('type', 0)->sum('amount');

            // === –î–æ–ª–≥–æ–≤—ã–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ (–¥–ª—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏) ===
            $debtIncomeCount = $debtTransactions->where('type', 1)->count();
            $debtIncome = $debtTransactions->where('type', 1)->sum('amount');

            $debtOutcomeCount = $debtTransactions->where('type', 0)->count();
            $debtOutcome = $debtTransactions->where('type', 0)->sum('amount');

            // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –∏—Ç–æ–≥–æ–≤—ã–π –±–∞–ª–∞–Ω—Å (—Ç–æ–ª—å–∫–æ –Ω–µ –¥–æ–ª–≥–æ–≤—ã–µ)
            $calculatedBalance = $income - $outcome;

            // –¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å –≤ –ë–î
            $currentBalance = $cashRegister->balance;

            // –†–∞–∑–Ω–∏—Ü–∞
            $difference = $calculatedBalance - $currentBalance;

            // === –û—Å–Ω–æ–≤–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ ===
            $this->line("   üìä –û–°–ù–û–í–ù–´–ï –¢–†–ê–ù–ó–ê–ö–¶–ò–ò (—É—á–∏—Ç—ã–≤–∞—é—Ç—Å—è –≤ –±–∞–ª–∞–Ω—Å–µ –∫–∞—Å—Å—ã):");
            $this->line("      ‚îå‚îÄ –ü—Ä–∏—Ö–æ–¥:              " . $this->formatMoney($income) . " ({$incomeCount} —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π)");
            $this->line("      ‚îî‚îÄ –†–∞—Å—Ö–æ–¥:              " . $this->formatMoney($outcome) . " ({$outcomeCount} —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π)");
            $this->newLine();

            if ($debtTransactions->count() > 0) {
                $this->line("   üí≥ –î–û–õ–ì–û–í–´–ï –û–ü–ï–†–ê–¶–ò–ò (–ù–ï —É—á–∏—Ç—ã–≤–∞—é—Ç—Å—è –≤ –±–∞–ª–∞–Ω—Å–µ –∫–∞—Å—Å—ã):");
                $this->line("      ‚îå‚îÄ –ü—Ä–∏—Ö–æ–¥ (–¥–æ–ª–≥):       " . $this->formatMoney($debtIncome) . " ({$debtIncomeCount} —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π)");
                $this->line("      ‚îî‚îÄ –†–∞—Å—Ö–æ–¥ (–¥–æ–ª–≥):       " . $this->formatMoney($debtOutcome) . " ({$debtOutcomeCount} —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π)");
                $this->newLine();
            }

            $this->line("   üí∞ –ë–ê–õ–ê–ù–°:");
            $this->line("      ‚îå‚îÄ –†–∞—Å—Å—á–∏—Ç–∞–Ω–Ω—ã–π:        " . $this->formatMoney($calculatedBalance));
            $this->line("      ‚îî‚îÄ –¢–µ–∫—É—â–∏–π –≤ –ë–î:        " . $this->formatMoney($currentBalance));
            $this->newLine();

            if (abs($difference) < 0.01) {
                $this->info("   ‚úÖ –°—Ç–∞—Ç—É—Å: –ë–∞–ª–∞–Ω—Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π!");
            } else {
                $this->error("   ‚ùå –†–ê–°–•–û–ñ–î–ï–ù–ò–ï: " . $this->formatMoney($difference));
                $hasDiscrepancies = true;
                $totalDiscrepancy += abs($difference);
            }

            // –î–µ—Ç–∞–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –ø–æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è–º
            if ($detailed) {
                $this->newLine();
                $this->line("   üìã –î–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:");
                $this->line("      –í—Å–µ–≥–æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π:      " . $allTransactions->count());
                $this->line("      ‚îú‚îÄ –û–±—ã—á–Ω—ã—Ö:            " . $nonDebtTransactions->count());
                $this->line("      ‚îî‚îÄ –î–æ–ª–≥–æ–≤—ã—Ö:           " . $debtTransactions->count());

                // –ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ –ø–æ –¥–Ω—è–º
                $transactionsByDate = $nonDebtTransactions->groupBy(function($transaction) {
                    return \Carbon\Carbon::parse($transaction->date)->format('Y-m-d');
                });

                $this->line("      –£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –¥–Ω–µ–π:       " . $transactionsByDate->count());

                // –°—Ä–µ–¥–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è
                if ($incomeCount > 0) {
                    $this->line("      –°—Ä–µ–¥–Ω–∏–π –ø—Ä–∏—Ö–æ–¥:        " . $this->formatMoney($income / $incomeCount));
                }
                if ($outcomeCount > 0) {
                    $this->line("      –°—Ä–µ–¥–Ω–∏–π —Ä–∞—Å—Ö–æ–¥:        " . $this->formatMoney($outcome / $outcomeCount));
                }
            }

            $totalIncome += $income;
            $totalOutcome += $outcome;

            $this->newLine();
        }

        // === –ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ ===
        $this->info('‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê');
        $this->info('üìà –û–ë–©–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ü–û –í–°–ï–ú –ö–ê–°–°–ê–ú:');
        $this->newLine();
        $this->line("   –í—Å–µ–≥–æ –∫–∞—Å—Å:            " . $cashRegisters->count());
        $this->line("   –û–±—â–∏–π –ø—Ä–∏—Ö–æ–¥:          " . $this->formatMoney($totalIncome));
        $this->line("   –û–±—â–∏–π —Ä–∞—Å—Ö–æ–¥:          " . $this->formatMoney($totalOutcome));
        $this->line("   –û–±—â–∏–π –±–∞–ª–∞–Ω—Å:          " . $this->formatMoney($totalIncome - $totalOutcome));
        $this->newLine();

        if (!$hasDiscrepancies) {
            $this->info('‚úÖ –í—Å–µ –±–∞–ª–∞–Ω—Å—ã –∫–∞—Å—Å –≤–µ—Ä–Ω—ã!');
        } else {
            $this->error('‚ùå –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã —Ä–∞—Å—Ö–æ–∂–¥–µ–Ω–∏—è –≤ –±–∞–ª–∞–Ω—Å–∞—Ö –∫–∞—Å—Å!');
            $this->error('   –û–±—â–∞—è —Å—É–º–º–∞ —Ä–∞—Å—Ö–æ–∂–¥–µ–Ω–∏–π: ' . $this->formatMoney($totalDiscrepancy));
        }

        $this->info('‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê');
        $this->newLine();

        if (!$detailed) {
            $this->comment('üí° –î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–µ—Ç–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–ª–∞–≥ --detailed');
        }

        return Command::SUCCESS;
    }

    /**
     * –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–µ–Ω–µ–∂–Ω–æ–π —Å—É–º–º—ã
     */
    private function formatMoney($amount)
    {
        return number_format($amount, 2, '.', ' ');
    }
}

